"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RiveViewManager = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _types = require("./types");

var _helpers = require("./helpers");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const VIEW_NAME = 'RiveReactNativeView';
const RiveViewManager = (0, _reactNative.requireNativeComponent)(VIEW_NAME);
exports.RiveViewManager = RiveViewManager;

const RiveContainer = /*#__PURE__*/_react.default.forwardRef(({
  children,
  onPlay,
  onPause,
  onStop,
  onLoopEnd,
  onStateChanged,
  onError,
  style,
  autoplay = true,
  resourceName,
  url,
  alignment = _types.Alignment.Center,
  fit = _types.Fit.Contain,
  artboardName,
  animationName,
  stateMachineName,
  testID
}, ref) => {
  const riveRef = (0, _react.useRef)(null);
  const isUserHandlingErrors = onError !== undefined;
  const onPlayHandler = (0, _react.useCallback)(event => {
    const {
      animationName: eventAnimationName,
      isStateMachine
    } = event.nativeEvent;
    onPlay === null || onPlay === void 0 ? void 0 : onPlay(eventAnimationName, isStateMachine);
  }, [onPlay]);
  const onPauseHandler = (0, _react.useCallback)(event => {
    const {
      animationName: eventAnimationName,
      isStateMachine
    } = event.nativeEvent;
    onPause === null || onPause === void 0 ? void 0 : onPause(eventAnimationName, isStateMachine);
  }, [onPause]);
  const onStopHandler = (0, _react.useCallback)(event => {
    const {
      animationName: eventAnimationName,
      isStateMachine
    } = event.nativeEvent;
    onStop === null || onStop === void 0 ? void 0 : onStop(eventAnimationName, isStateMachine);
  }, [onStop]);
  const onLoopEndHandler = (0, _react.useCallback)(event => {
    const {
      animationName: eventAnimationName,
      loopMode
    } = event.nativeEvent;
    onLoopEnd === null || onLoopEnd === void 0 ? void 0 : onLoopEnd(eventAnimationName, loopMode);
  }, [onLoopEnd]);
  const onStateChangedHandler = (0, _react.useCallback)(event => {
    const {
      stateMachineName: eventStateMachineName,
      stateName
    } = event.nativeEvent;
    onStateChanged === null || onStateChanged === void 0 ? void 0 : onStateChanged(eventStateMachineName, stateName);
  }, [onStateChanged]);
  const onErrorHandler = (0, _react.useCallback)(event => {
    const {
      type,
      message
    } = event.nativeEvent;
    const rnRiveError = (0, _helpers.convertErrorFromNativeToRN)({
      type,
      message
    });

    if (rnRiveError !== null) {
      onError === null || onError === void 0 ? void 0 : onError(rnRiveError);
    }
  }, [onError]);
  const play = (0, _react.useCallback)((animationNames = [], loop = _types.LoopMode.Auto, direction = _types.Direction.Auto, areStateMachines = false) => {
    const animationNamesArray = Array.isArray(animationNames) ? animationNames : [animationNames];

    _reactNative.UIManager.dispatchViewManagerCommand((0, _reactNative.findNodeHandle)(riveRef.current), _reactNative.UIManager.getViewManagerConfig(VIEW_NAME).Commands.play, [animationNamesArray, loop, direction, areStateMachines]);
  }, []);
  const pause = (0, _react.useCallback)((animationNames = [], areStateMachines = false) => {
    const animationNamesArray = Array.isArray(animationNames) ? animationNames : [animationNames];

    _reactNative.UIManager.dispatchViewManagerCommand((0, _reactNative.findNodeHandle)(riveRef.current), _reactNative.UIManager.getViewManagerConfig(VIEW_NAME).Commands.pause, [animationNamesArray, areStateMachines]);
  }, []);
  const stop = (0, _react.useCallback)((animationNames = [], areStateMachines = false) => {
    const animationNamesArray = Array.isArray(animationNames) ? animationNames : [animationNames];

    _reactNative.UIManager.dispatchViewManagerCommand((0, _reactNative.findNodeHandle)(riveRef.current), _reactNative.UIManager.getViewManagerConfig(VIEW_NAME).Commands.stop, [animationNamesArray, areStateMachines]);
  }, []);
  const reset = (0, _react.useCallback)(() => {
    _reactNative.UIManager.dispatchViewManagerCommand((0, _reactNative.findNodeHandle)(riveRef.current), _reactNative.UIManager.getViewManagerConfig(VIEW_NAME).Commands.reset, []);
  }, []);
  const fireState = (0, _react.useCallback)((triggerStateMachineName, inputName) => {
    _reactNative.UIManager.dispatchViewManagerCommand((0, _reactNative.findNodeHandle)(riveRef.current), _reactNative.UIManager.getViewManagerConfig(VIEW_NAME).Commands.fireState, [triggerStateMachineName, inputName]);
  }, []);
  const setInputState = (0, _react.useCallback)((triggerStateMachineName, inputName, value) => {
    if (typeof value === 'boolean') {
      _reactNative.UIManager.dispatchViewManagerCommand((0, _reactNative.findNodeHandle)(riveRef.current), _reactNative.UIManager.getViewManagerConfig(VIEW_NAME).Commands.setBooleanState, [triggerStateMachineName, inputName, value]);
    } else if (typeof value === 'number') {
      _reactNative.UIManager.dispatchViewManagerCommand((0, _reactNative.findNodeHandle)(riveRef.current), _reactNative.UIManager.getViewManagerConfig(VIEW_NAME).Commands.setNumberState, [triggerStateMachineName, inputName, value]);
    }
  }, []);
  (0, _react.useImperativeHandle)(ref, () => ({
    setInputState,
    fireState,
    play,
    pause,
    stop,
    reset
  }), [play, pause, stop, reset, setInputState, fireState]);
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, style],
    ref: ref,
    testID: testID
  }, /*#__PURE__*/_react.default.createElement(RiveViewManager, {
    ref: riveRef,
    resourceName: resourceName,
    isUserHandlingErrors: isUserHandlingErrors,
    autoplay: autoplay,
    fit: fit,
    url: url,
    style: styles.animation,
    onPlay: onPlayHandler,
    onPause: onPauseHandler,
    onStop: onStopHandler,
    onLoopEnd: onLoopEndHandler,
    onStateChanged: onStateChangedHandler,
    onError: onErrorHandler,
    alignment: alignment,
    artboardName: artboardName,
    animationName: animationName,
    stateMachineName: stateMachineName
  }), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.children
  }, children));
});

const styles = _reactNative.StyleSheet.create({
  children: {
    position: 'absolute',
    width: '100%',
    height: '100%'
  },
  container: {
    flexGrow: 1
  },
  animation: {
    flex: 1
  }
});

var _default = RiveContainer;
exports.default = _default;
//# sourceMappingURL=Rive.js.map
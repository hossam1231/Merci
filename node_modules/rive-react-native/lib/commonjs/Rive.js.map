{"version":3,"sources":["Rive.tsx"],"names":["VIEW_NAME","RiveViewManager","RiveContainer","React","forwardRef","children","onPlay","onPause","onStop","onLoopEnd","onStateChanged","onError","style","autoplay","resourceName","url","alignment","Alignment","Center","fit","Fit","Contain","artboardName","animationName","stateMachineName","testID","ref","riveRef","isUserHandlingErrors","undefined","onPlayHandler","event","eventAnimationName","isStateMachine","nativeEvent","onPauseHandler","onStopHandler","onLoopEndHandler","loopMode","onStateChangedHandler","eventStateMachineName","stateName","onErrorHandler","type","message","rnRiveError","play","animationNames","loop","LoopMode","Auto","direction","Direction","areStateMachines","animationNamesArray","Array","isArray","UIManager","dispatchViewManagerCommand","current","getViewManagerConfig","Commands","pause","stop","reset","fireState","triggerStateMachineName","inputName","setInputState","value","setBooleanState","setNumberState","styles","container","animation","StyleSheet","create","position","width","height","flexGrow","flex"],"mappings":"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","sourcesContent":["import React, { useCallback, useImperativeHandle, useRef } from 'react';\nimport {\n  requireNativeComponent,\n  UIManager,\n  findNodeHandle,\n  ViewStyle,\n  NativeSyntheticEvent,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport { RiveRef, Direction, LoopMode, RNRiveError } from './types';\nimport { convertErrorFromNativeToRN, XOR } from './helpers';\n\nimport { Alignment, Fit } from './types';\n\ntype RiveProps = {\n  onPlay?: (\n    event: NativeSyntheticEvent<{\n      animationName: string;\n      isStateMachine: boolean;\n    }>\n  ) => void;\n  onPause?: (\n    event: NativeSyntheticEvent<{\n      animationName: string;\n      isStateMachine: boolean;\n    }>\n  ) => void;\n  onStop?: (\n    event: NativeSyntheticEvent<{\n      animationName: string;\n      isStateMachine: boolean;\n    }>\n  ) => void;\n  onLoopEnd?: (\n    event: NativeSyntheticEvent<{\n      animationName: string;\n      loopMode: LoopMode;\n    }>\n  ) => void;\n  onStateChanged?: (\n    event: NativeSyntheticEvent<{\n      stateMachineName: string;\n      stateName: string;\n    }>\n  ) => void;\n  onError?: (\n    event: NativeSyntheticEvent<{\n      type: string;\n      message: string;\n    }>\n  ) => void;\n  isUserHandlingErrors: boolean;\n  autoplay?: boolean;\n  fit: Fit;\n  alignment: Alignment;\n  artboardName?: string;\n  animationName?: string;\n  stateMachineName?: string;\n  ref: any;\n  resourceName?: string;\n  url?: string;\n  style?: ViewStyle;\n  testID?: string;\n};\n\nconst VIEW_NAME = 'RiveReactNativeView';\n\ntype Props = {\n  onPlay?: (animationName: string, isStateMachine: boolean) => void;\n  onPause?: (animationName: string, isStateMachine: boolean) => void;\n  onStop?: (animationName: string, isStateMachine: boolean) => void;\n  onLoopEnd?: (animationName: string, loopMode: LoopMode) => void;\n  onStateChanged?: (stateMachineName: string, stateName: string) => void;\n  onError?: (rnRiveError: RNRiveError) => void;\n  fit?: Fit;\n  style?: ViewStyle;\n  testID?: string;\n  alignment?: Alignment;\n  artboardName?: string;\n  animationName?: string;\n  stateMachineName?: string;\n  autoplay?: boolean;\n} & XOR<{ resourceName: string }, { url: string }>;\n\nexport const RiveViewManager = requireNativeComponent<RiveProps>(VIEW_NAME);\n\nconst RiveContainer = React.forwardRef<RiveRef, Props>(\n  (\n    {\n      children,\n      onPlay,\n      onPause,\n      onStop,\n      onLoopEnd,\n      onStateChanged,\n      onError,\n      style,\n      autoplay = true,\n      resourceName,\n      url,\n      alignment = Alignment.Center,\n      fit = Fit.Contain,\n      artboardName,\n      animationName,\n      stateMachineName,\n      testID,\n    },\n    ref\n  ) => {\n    const riveRef = useRef(null);\n\n    const isUserHandlingErrors = onError !== undefined;\n\n    const onPlayHandler = useCallback(\n      (\n        event: NativeSyntheticEvent<{\n          animationName: string;\n          isStateMachine: boolean;\n        }>\n      ) => {\n        const { animationName: eventAnimationName, isStateMachine } =\n          event.nativeEvent;\n        onPlay?.(eventAnimationName, isStateMachine);\n      },\n      [onPlay]\n    );\n\n    const onPauseHandler = useCallback(\n      (\n        event: NativeSyntheticEvent<{\n          animationName: string;\n          isStateMachine: boolean;\n        }>\n      ) => {\n        const { animationName: eventAnimationName, isStateMachine } =\n          event.nativeEvent;\n        onPause?.(eventAnimationName, isStateMachine);\n      },\n      [onPause]\n    );\n\n    const onStopHandler = useCallback(\n      (\n        event: NativeSyntheticEvent<{\n          animationName: string;\n          isStateMachine: boolean;\n        }>\n      ) => {\n        const { animationName: eventAnimationName, isStateMachine } =\n          event.nativeEvent;\n        onStop?.(eventAnimationName, isStateMachine);\n      },\n      [onStop]\n    );\n\n    const onLoopEndHandler = useCallback(\n      (\n        event: NativeSyntheticEvent<{\n          animationName: string;\n          loopMode: LoopMode;\n        }>\n      ) => {\n        const { animationName: eventAnimationName, loopMode } =\n          event.nativeEvent;\n        onLoopEnd?.(eventAnimationName, loopMode);\n      },\n      [onLoopEnd]\n    );\n\n    const onStateChangedHandler = useCallback(\n      (\n        event: NativeSyntheticEvent<{\n          stateMachineName: string;\n          stateName: string;\n        }>\n      ) => {\n        const { stateMachineName: eventStateMachineName, stateName } =\n          event.nativeEvent;\n        onStateChanged?.(eventStateMachineName, stateName);\n      },\n      [onStateChanged]\n    );\n\n    const onErrorHandler = useCallback(\n      (event: NativeSyntheticEvent<{ type: string; message: string }>) => {\n        const { type, message } = event.nativeEvent;\n        const rnRiveError = convertErrorFromNativeToRN({ type, message });\n        if (rnRiveError !== null) {\n          onError?.(rnRiveError);\n        }\n      },\n      [onError]\n    );\n\n    const play = useCallback<RiveRef['play']>(\n      (\n        animationNames = [],\n        loop = LoopMode.Auto,\n        direction = Direction.Auto,\n        areStateMachines = false\n      ) => {\n        const animationNamesArray = Array.isArray(animationNames)\n          ? animationNames\n          : [animationNames];\n\n        UIManager.dispatchViewManagerCommand(\n          findNodeHandle(riveRef.current),\n          UIManager.getViewManagerConfig(VIEW_NAME).Commands.play,\n          [animationNamesArray, loop, direction, areStateMachines]\n        );\n      },\n      []\n    );\n\n    const pause = useCallback<RiveRef['pause']>(\n      (animationNames = [], areStateMachines = false) => {\n        const animationNamesArray = Array.isArray(animationNames)\n          ? animationNames\n          : [animationNames];\n\n        UIManager.dispatchViewManagerCommand(\n          findNodeHandle(riveRef.current),\n          UIManager.getViewManagerConfig(VIEW_NAME).Commands.pause,\n          [animationNamesArray, areStateMachines]\n        );\n      },\n      []\n    );\n\n    const stop = useCallback<RiveRef['stop']>(\n      (animationNames = [], areStateMachines = false) => {\n        const animationNamesArray = Array.isArray(animationNames)\n          ? animationNames\n          : [animationNames];\n\n        UIManager.dispatchViewManagerCommand(\n          findNodeHandle(riveRef.current),\n          UIManager.getViewManagerConfig(VIEW_NAME).Commands.stop,\n          [animationNamesArray, areStateMachines]\n        );\n      },\n      []\n    );\n\n    const reset = useCallback(() => {\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(riveRef.current),\n        UIManager.getViewManagerConfig(VIEW_NAME).Commands.reset,\n        []\n      );\n    }, []);\n\n    const fireState = useCallback<RiveRef['fireState']>(\n      (triggerStateMachineName, inputName) => {\n        UIManager.dispatchViewManagerCommand(\n          findNodeHandle(riveRef.current),\n          UIManager.getViewManagerConfig(VIEW_NAME).Commands.fireState,\n          [triggerStateMachineName, inputName]\n        );\n      },\n      []\n    );\n\n    const setInputState = useCallback<RiveRef['setInputState']>(\n      (triggerStateMachineName, inputName, value) => {\n        if (typeof value === 'boolean') {\n          UIManager.dispatchViewManagerCommand(\n            findNodeHandle(riveRef.current),\n            UIManager.getViewManagerConfig(VIEW_NAME).Commands.setBooleanState,\n            [triggerStateMachineName, inputName, value]\n          );\n        } else if (typeof value === 'number') {\n          UIManager.dispatchViewManagerCommand(\n            findNodeHandle(riveRef.current),\n            UIManager.getViewManagerConfig(VIEW_NAME).Commands.setNumberState,\n            [triggerStateMachineName, inputName, value]\n          );\n        }\n      },\n      []\n    );\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        setInputState,\n        fireState,\n        play,\n        pause,\n        stop,\n        reset,\n      }),\n      [play, pause, stop, reset, setInputState, fireState]\n    );\n\n    return (\n      <View style={[styles.container, style]} ref={ref as any} testID={testID}>\n        <RiveViewManager\n          ref={riveRef}\n          resourceName={resourceName}\n          isUserHandlingErrors={isUserHandlingErrors}\n          autoplay={autoplay}\n          fit={fit}\n          url={url}\n          style={styles.animation}\n          onPlay={onPlayHandler}\n          onPause={onPauseHandler}\n          onStop={onStopHandler}\n          onLoopEnd={onLoopEndHandler}\n          onStateChanged={onStateChangedHandler}\n          onError={onErrorHandler}\n          alignment={alignment}\n          artboardName={artboardName}\n          animationName={animationName}\n          stateMachineName={stateMachineName}\n        />\n\n        <View style={styles.children}>{children}</View>\n      </View>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  children: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n  },\n  container: {\n    flexGrow: 1,\n  },\n  animation: {\n    flex: 1,\n  },\n});\n\nexport default RiveContainer;\n"]}
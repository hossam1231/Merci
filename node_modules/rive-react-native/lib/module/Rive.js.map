{"version":3,"sources":["Rive.tsx"],"names":["React","useCallback","useImperativeHandle","useRef","requireNativeComponent","UIManager","findNodeHandle","StyleSheet","View","Direction","LoopMode","convertErrorFromNativeToRN","Alignment","Fit","VIEW_NAME","RiveViewManager","RiveContainer","forwardRef","children","onPlay","onPause","onStop","onLoopEnd","onStateChanged","onError","style","autoplay","resourceName","url","alignment","Center","fit","Contain","artboardName","animationName","stateMachineName","testID","ref","riveRef","isUserHandlingErrors","undefined","onPlayHandler","event","eventAnimationName","isStateMachine","nativeEvent","onPauseHandler","onStopHandler","onLoopEndHandler","loopMode","onStateChangedHandler","eventStateMachineName","stateName","onErrorHandler","type","message","rnRiveError","play","animationNames","loop","Auto","direction","areStateMachines","animationNamesArray","Array","isArray","dispatchViewManagerCommand","current","getViewManagerConfig","Commands","pause","stop","reset","fireState","triggerStateMachineName","inputName","setInputState","value","setBooleanState","setNumberState","styles","container","animation","create","position","width","height","flexGrow","flex"],"mappings":"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","sourcesContent":["import React, { useCallback, useImperativeHandle, useRef } from 'react';\nimport {\n  requireNativeComponent,\n  UIManager,\n  findNodeHandle,\n  ViewStyle,\n  NativeSyntheticEvent,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport { RiveRef, Direction, LoopMode, RNRiveError } from './types';\nimport { convertErrorFromNativeToRN, XOR } from './helpers';\n\nimport { Alignment, Fit } from './types';\n\ntype RiveProps = {\n  onPlay?: (\n    event: NativeSyntheticEvent<{\n      animationName: string;\n      isStateMachine: boolean;\n    }>\n  ) => void;\n  onPause?: (\n    event: NativeSyntheticEvent<{\n      animationName: string;\n      isStateMachine: boolean;\n    }>\n  ) => void;\n  onStop?: (\n    event: NativeSyntheticEvent<{\n      animationName: string;\n      isStateMachine: boolean;\n    }>\n  ) => void;\n  onLoopEnd?: (\n    event: NativeSyntheticEvent<{\n      animationName: string;\n      loopMode: LoopMode;\n    }>\n  ) => void;\n  onStateChanged?: (\n    event: NativeSyntheticEvent<{\n      stateMachineName: string;\n      stateName: string;\n    }>\n  ) => void;\n  onError?: (\n    event: NativeSyntheticEvent<{\n      type: string;\n      message: string;\n    }>\n  ) => void;\n  isUserHandlingErrors: boolean;\n  autoplay?: boolean;\n  fit: Fit;\n  alignment: Alignment;\n  artboardName?: string;\n  animationName?: string;\n  stateMachineName?: string;\n  ref: any;\n  resourceName?: string;\n  url?: string;\n  style?: ViewStyle;\n  testID?: string;\n};\n\nconst VIEW_NAME = 'RiveReactNativeView';\n\ntype Props = {\n  onPlay?: (animationName: string, isStateMachine: boolean) => void;\n  onPause?: (animationName: string, isStateMachine: boolean) => void;\n  onStop?: (animationName: string, isStateMachine: boolean) => void;\n  onLoopEnd?: (animationName: string, loopMode: LoopMode) => void;\n  onStateChanged?: (stateMachineName: string, stateName: string) => void;\n  onError?: (rnRiveError: RNRiveError) => void;\n  fit?: Fit;\n  style?: ViewStyle;\n  testID?: string;\n  alignment?: Alignment;\n  artboardName?: string;\n  animationName?: string;\n  stateMachineName?: string;\n  autoplay?: boolean;\n} & XOR<{ resourceName: string }, { url: string }>;\n\nexport const RiveViewManager = requireNativeComponent<RiveProps>(VIEW_NAME);\n\nconst RiveContainer = React.forwardRef<RiveRef, Props>(\n  (\n    {\n      children,\n      onPlay,\n      onPause,\n      onStop,\n      onLoopEnd,\n      onStateChanged,\n      onError,\n      style,\n      autoplay = true,\n      resourceName,\n      url,\n      alignment = Alignment.Center,\n      fit = Fit.Contain,\n      artboardName,\n      animationName,\n      stateMachineName,\n      testID,\n    },\n    ref\n  ) => {\n    const riveRef = useRef(null);\n\n    const isUserHandlingErrors = onError !== undefined;\n\n    const onPlayHandler = useCallback(\n      (\n        event: NativeSyntheticEvent<{\n          animationName: string;\n          isStateMachine: boolean;\n        }>\n      ) => {\n        const { animationName: eventAnimationName, isStateMachine } =\n          event.nativeEvent;\n        onPlay?.(eventAnimationName, isStateMachine);\n      },\n      [onPlay]\n    );\n\n    const onPauseHandler = useCallback(\n      (\n        event: NativeSyntheticEvent<{\n          animationName: string;\n          isStateMachine: boolean;\n        }>\n      ) => {\n        const { animationName: eventAnimationName, isStateMachine } =\n          event.nativeEvent;\n        onPause?.(eventAnimationName, isStateMachine);\n      },\n      [onPause]\n    );\n\n    const onStopHandler = useCallback(\n      (\n        event: NativeSyntheticEvent<{\n          animationName: string;\n          isStateMachine: boolean;\n        }>\n      ) => {\n        const { animationName: eventAnimationName, isStateMachine } =\n          event.nativeEvent;\n        onStop?.(eventAnimationName, isStateMachine);\n      },\n      [onStop]\n    );\n\n    const onLoopEndHandler = useCallback(\n      (\n        event: NativeSyntheticEvent<{\n          animationName: string;\n          loopMode: LoopMode;\n        }>\n      ) => {\n        const { animationName: eventAnimationName, loopMode } =\n          event.nativeEvent;\n        onLoopEnd?.(eventAnimationName, loopMode);\n      },\n      [onLoopEnd]\n    );\n\n    const onStateChangedHandler = useCallback(\n      (\n        event: NativeSyntheticEvent<{\n          stateMachineName: string;\n          stateName: string;\n        }>\n      ) => {\n        const { stateMachineName: eventStateMachineName, stateName } =\n          event.nativeEvent;\n        onStateChanged?.(eventStateMachineName, stateName);\n      },\n      [onStateChanged]\n    );\n\n    const onErrorHandler = useCallback(\n      (event: NativeSyntheticEvent<{ type: string; message: string }>) => {\n        const { type, message } = event.nativeEvent;\n        const rnRiveError = convertErrorFromNativeToRN({ type, message });\n        if (rnRiveError !== null) {\n          onError?.(rnRiveError);\n        }\n      },\n      [onError]\n    );\n\n    const play = useCallback<RiveRef['play']>(\n      (\n        animationNames = [],\n        loop = LoopMode.Auto,\n        direction = Direction.Auto,\n        areStateMachines = false\n      ) => {\n        const animationNamesArray = Array.isArray(animationNames)\n          ? animationNames\n          : [animationNames];\n\n        UIManager.dispatchViewManagerCommand(\n          findNodeHandle(riveRef.current),\n          UIManager.getViewManagerConfig(VIEW_NAME).Commands.play,\n          [animationNamesArray, loop, direction, areStateMachines]\n        );\n      },\n      []\n    );\n\n    const pause = useCallback<RiveRef['pause']>(\n      (animationNames = [], areStateMachines = false) => {\n        const animationNamesArray = Array.isArray(animationNames)\n          ? animationNames\n          : [animationNames];\n\n        UIManager.dispatchViewManagerCommand(\n          findNodeHandle(riveRef.current),\n          UIManager.getViewManagerConfig(VIEW_NAME).Commands.pause,\n          [animationNamesArray, areStateMachines]\n        );\n      },\n      []\n    );\n\n    const stop = useCallback<RiveRef['stop']>(\n      (animationNames = [], areStateMachines = false) => {\n        const animationNamesArray = Array.isArray(animationNames)\n          ? animationNames\n          : [animationNames];\n\n        UIManager.dispatchViewManagerCommand(\n          findNodeHandle(riveRef.current),\n          UIManager.getViewManagerConfig(VIEW_NAME).Commands.stop,\n          [animationNamesArray, areStateMachines]\n        );\n      },\n      []\n    );\n\n    const reset = useCallback(() => {\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(riveRef.current),\n        UIManager.getViewManagerConfig(VIEW_NAME).Commands.reset,\n        []\n      );\n    }, []);\n\n    const fireState = useCallback<RiveRef['fireState']>(\n      (triggerStateMachineName, inputName) => {\n        UIManager.dispatchViewManagerCommand(\n          findNodeHandle(riveRef.current),\n          UIManager.getViewManagerConfig(VIEW_NAME).Commands.fireState,\n          [triggerStateMachineName, inputName]\n        );\n      },\n      []\n    );\n\n    const setInputState = useCallback<RiveRef['setInputState']>(\n      (triggerStateMachineName, inputName, value) => {\n        if (typeof value === 'boolean') {\n          UIManager.dispatchViewManagerCommand(\n            findNodeHandle(riveRef.current),\n            UIManager.getViewManagerConfig(VIEW_NAME).Commands.setBooleanState,\n            [triggerStateMachineName, inputName, value]\n          );\n        } else if (typeof value === 'number') {\n          UIManager.dispatchViewManagerCommand(\n            findNodeHandle(riveRef.current),\n            UIManager.getViewManagerConfig(VIEW_NAME).Commands.setNumberState,\n            [triggerStateMachineName, inputName, value]\n          );\n        }\n      },\n      []\n    );\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        setInputState,\n        fireState,\n        play,\n        pause,\n        stop,\n        reset,\n      }),\n      [play, pause, stop, reset, setInputState, fireState]\n    );\n\n    return (\n      <View style={[styles.container, style]} ref={ref as any} testID={testID}>\n        <RiveViewManager\n          ref={riveRef}\n          resourceName={resourceName}\n          isUserHandlingErrors={isUserHandlingErrors}\n          autoplay={autoplay}\n          fit={fit}\n          url={url}\n          style={styles.animation}\n          onPlay={onPlayHandler}\n          onPause={onPauseHandler}\n          onStop={onStopHandler}\n          onLoopEnd={onLoopEndHandler}\n          onStateChanged={onStateChangedHandler}\n          onError={onErrorHandler}\n          alignment={alignment}\n          artboardName={artboardName}\n          animationName={animationName}\n          stateMachineName={stateMachineName}\n        />\n\n        <View style={styles.children}>{children}</View>\n      </View>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  children: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n  },\n  container: {\n    flexGrow: 1,\n  },\n  animation: {\n    flex: 1,\n  },\n});\n\nexport default RiveContainer;\n"]}